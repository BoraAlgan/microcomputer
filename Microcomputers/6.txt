                                                                                                                             org 100h

.DATA
    msg1 DB 0AH,0DH, "Enter first  Number :  $"        
                                                       
                                                       
                                                       
    msg2 DB 0AH,0DH, "Enter second Number :  $"        
                                                          
                                                       
    msg3 DB 0AH,0DH, "Enter operator (+,-,*,/) :  $"
    result DW 0AH,0DH, " $"
    proj  DB 0AH,0DH,   "                   -------------- CALCULATOR ----------------$" 
    myname  DB 0AH,0DH, "                   -------------- BORA ALGAN ----------------$"
    reg_no  DB 0AH,0DH, "                   ---------------xxxxxxxxxxx ---------------$"
    section  DB 0AH,0DH,"                   ---------------LAB TASK-7 ----------------$" 
    done  DB 0AH,0DH, "---------------------------------$" 
    done2  DB 0AH,0DH, "********************************************************************************$"
    invalid_message DB 0AH,0DH, "INVALID INPUT$"    
    num1 dw 00h
    num2 dw 00h
    overflow db 00h  

.CODE       
            include 'emu8086.inc'
            LEA DX,done2            
            MOV AH,09H              
            INT 21H                 
            LEA DX,proj             
            MOV AH,09H              
            INT 21H                 
            LEA DX,myname           
            MOV AH,09H              
            INT 21H                 
            LEA DX,reg_no           
            MOV AH,09H              
            INT 21H                 
            LEA DX,section          
            MOV AH,09H              
            INT 21H                 
            LEA DX,done2            
            MOV AH,09H              
            INT 21H                 
            
            
 calculator:
            MOV AX,@DATA           
            MOV DS,AX                
     
            CALL input              
    
            CALL parser             
    
            CALL operation          
            
            MOV [SI],'&'             
            
            call reverse_parser     
            
            call print_result       
   
 
 
 


 
 
 input  PROC                        
                
                MOV [SI],'&'        
                LEA DX,msg1         
                MOV AH,09H          
                INT 21H            
                
       
                MOV BX, 2040H
                         
        input1:          
                MOV AH,01H          
                INT 21H            
                CMP AL,13d         
                JZ  print_message2  
                MOV AH,AL
                SUB AH,'0'         
                JC invalid          
                MOV AH,AL 
                MOV DH,'9'
                SUB DH,AH          
                JC invalid 
                MOV DX, BX
                OUT DX, AL 
                INC BX
                       
                SUB AL,'0'
                          
                INC SI              
                MOV [SI],AL         
                JMP input1         
                
               
                
        print_message2:
                INC SI             
                MOV [SI],'&'        
                LEA DX,msg2         
                MOV AH,09H          
                INT 21H
                MOV BX, 2046H            
                                   
        input2:
                MOV AH,01H         
                INT 21H           
                CMP AL,13d          
                JZ exit         
                MOV AH,AL
                SUB AH,'0'         
                JC invalid         
                MOV AH,AL 
                MOV DH,'9'
                SUB DH,AH         
                JC invalid
                MOV DX, BX
                OUT DX, AL
                INC BX         
                SUB AL,'0'       
                INC SI           
                MOV [SI],AL       
                JMP input2         
        exit:              
                ret
                
       invalid: LEA DX,invalid_message
                MOV AH,09H          
                INT 21H             
                HLT
 ENDP                              
 




 
 
 




 parser PROC                        
  
                MOV CX,01d          
                MOV BX,00H          
                
        parse2:  
                MOV AX,00H          
                MOV AL,[SI]        
                MUL CX             
                ADD BX,AX         
                MOV AX,CX          
                MOV CX,10d          
                MUL CX              
                MOV CX,AX           
                DEC SI             
                CMP [SI],'&'        
                JNZ parse2          
                
                MOV [num2],BX      
                MOV BX,00H                   
                MOV DX,00h          
                DEC SI             
                MOV CX,01d          
                
         parse1:  
                MOV AX,00H          
                MOV AL,[SI]         
                MUL CX              
                ADD BX,AX           
                MOV AX,CX          
                MOV CX,10d          
                MUL CX              
                MOV CX,AX           
                DEC SI              
                CMP [SI],'&'        
                JNZ parse1          
                
                MOV [num1],BX       
              
                
                MOV AX,[num1]       
                MOV BX,[num2]        
                 
                
        ret                                                                                                     
 ENDP                               
       
       
        
  
  
  
       

       
       
 operation proc                     
               MOV CX,AX 
		check:           
               LEA DX,msg3          
               MOV AH,09H           
               INT 21H              
                
                
               MOV AH,01H           
               INT 21H              
               
               CMP AL,'+'           
               JZ printAddition         
               
               CMP AL,'-'           
               JZ printSubtraction      
               
               CMP AL,'*'           
               JZ printMultiplication    
               
               CMP AL,'/'           
               JZ printDivision          
               
           
               LEA DX,invalid_message
               MOV AH,09H 
		       mov al, 0          
               INT 21H              
               jmp check
       
       printAddition:
       MOV DX, 2044H
      
       OUT DX, AL
       jmp printAdditionEqual
       
       printSubtraction:
       MOV DX, 2044H
       OUT DX, AL
       jmp printSubtractionEqual
       
       printMultiplication:
       MOV DX, 2044H
       OUT DX, AL  
       jmp printMultiplicationEqual
       
       printDivision:
       MOV DX, 2044H
       OUT DX, AL

       jmp printDivisionEqual
       
       
       printAdditionEqual:
       MOV DX, 204AH
       MOV AL, '='
       OUT DX, AL 
       jmp addition  
       
       
       printSubtractionEqual:
       MOV DX, 204AH
       MOV AL, '='
       OUT DX, AL 
       jmp subtraction
       
       printMultiplicationEqual:
       MOV DX, 204AH
       MOV AL, '='
       OUT DX, AL 
       jmp multiplication
       
       
       printDivisionEqual:
       MOV DX, 204AH
       MOV AL, '='
       OUT DX, AL 
       jmp division
       
       
       addition:
                MOV AX,CX           
                MOV DX,00h          
                ADD AX,BX
                
                           
                ADC AX,DX 
                
                
               
                
                         
                RET
       subtraction:
                MOV AX,CX          
                SUB AX,BX           
                JC ov 
                JNC nov
             ov:NEG AX
                MOV [overflow],01h
                RET
            nov:RET 
                
       multiplication:
                MOV AX,CX           
                MOV DX,00H        
                MUL BX              
                RET
       division:
                MOV AX,CX           
                MOV DX,00H          
                ADD BX,DX
                JZ DbyZ
                DIV BX              
                RET
         DbyZ:  print '   ERROR : DIVIDE BY ZERO'
                JMP calculator
                                          
                                  
 ENDP                              
                  









                
 reverse_parser PROC                
     
        r_parse:
                MOV DX,00h          
                MOV BX,10d           
                DIV BX                
                ADD DL,'0'            

                INC SI             
                MOV [SI],DL            
                ADD AX,00h            
                JNZ r_parse             
                           
            
 ENDP                                
 
 
 
 





              
 
 
print_result PROC

              LEA DX,result
              MOV AH,09H
              INT 21H

              MOV CL,01h
              CMP CL,[overflow]
              MOV [overflow],00h
              JZ setMinusPosition
              JNZ setResultPosition


 setMinusPosition:
 MOV BX, 204BH
 jmp print_minus



 print_minus: MOV DL,'-'


              MOV AH,02H
              INT 21H 
              MOV AL, DL
              MOV DX, BX
              OUT DX, AL
              jmp setResultPosition


  setResultPosition:
  MOV BX, 204CH 
  jmp print




 
       print: 

              MOV DL,[SI]
              MOV AH,02H
              INT 21H
              MOV AL, DL
              MOV DX, BX
              OUT DX, AL
              INC BX
              DEC SI
              CMP [SI],'&'
              JNZ print

              LEA DX,done
              MOV AH,09H
              INT 21H

              JMP calculator
